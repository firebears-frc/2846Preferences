// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.firebears.subsystems;

import java.util.List;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class FBPreferences extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    static boolean initialized = false;
    static final Path PREF_FILE = Paths.get("/home/lvuser/fbpref.txt"/*"/home/jeron/fbpref.txt"*/);
    static ArrayList<String> keys;
    static ArrayList<String> values;
    
    private static void read(List<String> lines) {
    	Iterator<String> i = lines.iterator();
    	if(i.hasNext()) {
    		String type = i.next();
    		if(type.equals("FBPREF") == false) {
    			System.out.println("Bad Header = " + type);
    			return;
    		}
    	}
        while (i.hasNext()) {
        	String key = i.next();
        	String value = i.next();
            keys.add(key);
            values.add(value);
        }
    }
    
    private static void save() {
    	Iterator<String> k = keys.iterator();
    	Iterator<String> v = values.iterator();

    	Charset utf8 = StandardCharsets.UTF_8;
    	ArrayList<String> lines;

    	lines = new ArrayList<String>();
    	lines.add("FBPREF");
    	
    	while (k.hasNext()) {
        	lines.add(k.next());
        	lines.add(v.next());
        }
    	
    	try {
			Files.write(PREF_FILE, lines, utf8);
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Couldn't Update");
		}
    }
    
    public static void init() {
    	Charset utf8 = StandardCharsets.UTF_8;
    	List<String> lines;
    	
    	if(Files.notExists(PREF_FILE)) {
	    	lines = Arrays.asList("FBPREF");
	    	try {
	    		Files.write(PREF_FILE, lines, utf8);
	    	} catch (IOException e) {
	    	    e.printStackTrace();
	    	    return;
	    	}
    	}
    	try {
			lines = Files.readAllLines(PREF_FILE, utf8);
		} catch (IOException e) {
			e.printStackTrace();
			return;
		}
    	Iterator<String> i = lines.iterator();
        while (i.hasNext()) {
        	System.out.println();
            System.out.println(i.next());
        }
        initialized = true;
        
        keys = new ArrayList<String>();
        values = new ArrayList<String>();
        
        read(lines);
    }
    
    public static void set(String key, String value) {
    	Iterator<String> k = keys.iterator();
    	int i = 0;
    	
        while (k.hasNext()) {
        	String ckey = k.next();
        	
        	if(ckey.equals(key)) {
        		values.set(i, value);
        		save();
        		return;
        	}
        	
        	i++;
        }
        keys.add(key);
        values.add(value);
        
        save();
    }
    
    public static String get(String key, String default_value) {
    	Iterator<String> k = keys.iterator();
    	int i = 0;
    	
        while (k.hasNext()) {
        	String ckey = k.next();
        	
        	if(ckey.equals(key)) {
        		return values.get(i);
        	}
        	
        	i++;
        }
    	
    	return default_value;
    }
    
/*    public static void main(String[] args) {
    	System.out.println("Initializing Preferences....");
        FBPreferences.init();
        System.out.println("Set to:" + FBPreferences.get("Test1", "NULL"));
        FBPreferences.set("Test1", "Value3");
        System.out.println("Set to:" + FBPreferences.get("Test1", "NULL"));
        FBPreferences.set("Test2", "Value1");
        System.out.println("Set to:" + FBPreferences.get("Test2", "NULL"));
        System.out.println("Done!");
    }*/

}

